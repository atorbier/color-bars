/* OLED Shield Color Bars Program
 
This code generates a simulated color bar pattern to test
the color quality of your e-gizmo oled screen.

        Edited by: 2R0 on the 12th of March, year 2014...
                      ''''BOOOYAHHH''''
 
*/
 
#include <SD.h>
 
const byte REG_SOFTRES = 0x01; //Software Reset ***bit 01
const byte REG_DDISP_ON_OFF = 0x02; //Display ON/OFF SET ***bit 02
const byte REG_DSTBY_ON_OFF = 0x03; //Stanby Mode Set ***bit 03
const byte REG_DFRAME = 0x04; //Set Frame Frequence ***bit 04
const byte REG_WriteDirection = 0x05; //Sets GRAM Writing Direction ***bit 05
const byte REG_ScanDirection = 0x06; //Row Scan Direction ***bit 06
const byte REG_DispSize = 0x07; //Display Size Set ***bit 07
const byte REG_IF_Bus_Sel = 0x08; //Interface bus Select ***bit 08
const byte REG_Data_Masking = 0x09; //Masking Data ***bit 09
const byte REG_MBOXSize = 0x0A; //Data Reading/Writing Box ***bit 010
const byte REG_DISPStart = 0x0B; //Display Start Address ***bit 011
const byte REG_DataWrite = 0x0C; //Reading/Write Dot Matrix Display Data ***bit 012
const byte REG_READREG = 0x0D; //Read Register Status ***bit 013
const byte REG_DotCurrent = 0x0E; //Set Dot Matrix Current Level ***bit 014
const byte REG_DotPeakCurrent = 0x0F; //Set Dot Matrix Peak Current Level ***bit 015
const byte REG_PreC_Width = 0x1C; //Sets Precharge pulse width ***bit 028
const byte REG_PeakWidth = 0x1D; //Set Peak Pulse Width ***bit 029
const byte REG_PeakDelay = 0x1E; //Sets Peak Pulse Delay(0u~63u) ***bit 030
const byte REG_Row_Scan = 0x1F; //Set Row Scan Operation ***bit 031
const byte REG_IF_SEL = 0x2D; //Set Interface Mode ***bit 045
const byte REG_RGB_IF_CTRL = 0x2E; //RGB I/F Control ***bit 046
const byte REG_RGB_IF_POL = 0x2F; //Set RGB I/F Polarity ***bit 047
const byte REG_VCC_R_SEL = 0x30; //Set Internal Regulator for Row Scan ***bit 048
const byte REG_XTALK_Mode = 0x31; //Set XTALK Condition Setting ***bit 049
const byte REG_XTALK_EN = 0x32; //Set XTALK Enable ***bit 050
const byte REG_AGING_EN = 0x35; //Set AGING Mode ***bit 053
const byte REG_Gamma_Tune = 0x3A; //Set Gamma Correction Table Set ***bit 058
const byte REG_Gamma_Initial = 0x3B; //Set Gamma Correction Table Initialize ***bit 059
 
const byte A0B = 5; //pin 13 LD7222 'ADDRESS' (L:COMMAND H:PARAMETER)
const byte CSB = 4; //pin 12 LD7222 'CHIP SELECT' (ACTIVE:LOW)
const byte WRB = 3; //pin 10 LD7222 'WRITE' (ACTIVE:LOW)(C80 I/F) 
const byte RES = 2; //pin 09 LD7222 'RESET' (ACTIVE:LOW)
 
byte RED;
byte GREEN;
byte BLUE;
 
unsigned int Y, X;
 
const int chipSelect = 10;
 
void setup() {
  Serial.begin(9600);
  DDRC = ~0x00;    //D0-D7 output
  pinMode(A0B, OUTPUT);
  pinMode(CSB, OUTPUT);
  pinMode(WRB, OUTPUT);
  pinMode(RES, OUTPUT);
 
  pinMode(7, INPUT);
  pinMode(8, INPUT);
  pinMode(9, INPUT);
  pinMode(10, INPUT);
  pinMode(11, INPUT);
  pinMode(12, INPUT);
  //    WRITE_COMMAND(0x01); // Display ON/OFF SET
  //    while(1);
  init_OLED();
  Serial.print("Simulating Color Bar Pattern...");
}
 
void loop() {
  while(1) {
    // 180 white lines
    // reset screen to receive data
    WRITE_COMMAND(REG_DISPStart);
    WRITE_DATA(0x00);
    WRITE_COMMAND(REG_DataWrite);
    for(Y=0; Y<160; Y++) {
      for(X=0; X<128; X++) {
        // red
        WRITE_DATA(255);
        // green      
        WRITE_DATA(255);
        // green      
        WRITE_DATA(255);
      }      
    }      
    // 180 yellow lines
    // reset screen to receive data
    WRITE_COMMAND(REG_DISPStart);
    WRITE_DATA(0x00);
    WRITE_COMMAND(REG_DataWrite);
    for(Y=0; Y<160; Y++) {
      for(X=0; X<112; X++) {
        // red
        WRITE_DATA(255);
        // green      
        WRITE_DATA(255);
        // blue      
        WRITE_DATA(0);
      }      
    }
    // 180 cyan lines
    // reset screen to receive data
    WRITE_COMMAND(REG_DISPStart);
    WRITE_DATA(0x00);
    WRITE_COMMAND(REG_DataWrite);
    for(Y=0; Y<160; Y++) {
      for(X=0; X<96; X++) {
        // red
        WRITE_DATA(0);
        // green      
        WRITE_DATA(255);
        // blue      
        WRITE_DATA(255);
      }      
    }
    // 180 green lines
    // reset screen to receive data
    WRITE_COMMAND(REG_DISPStart);
    WRITE_DATA(0x00);
    WRITE_COMMAND(REG_DataWrite);
    for(Y=0; Y<160; Y++) {
      for(X=0; X<80; X++) {
        // blue
        WRITE_DATA(0);
        // green      
        WRITE_DATA(255);
        // red      
        WRITE_DATA(0);
      }      
    }          
    // 180 magenta lines
    // reset screen to receive data
    WRITE_COMMAND(REG_DISPStart);
    WRITE_DATA(0x00);
    WRITE_COMMAND(REG_DataWrite);
    for(Y=0; Y<160; Y++) {
      for(X=0; X<64; X++) {
        // red
        WRITE_DATA(255);
        // green      
        WRITE_DATA(0);
        // blue      
        WRITE_DATA(255);
      }      
    }       
    // 180 red lines
    WRITE_COMMAND(REG_DISPStart);
    WRITE_DATA(0x00);
    WRITE_COMMAND(REG_DataWrite);
    for(Y=0; Y<160; Y++) {
      for(X=0; X<48; X++) {
        // red
        WRITE_DATA(255);
        // green      
        WRITE_DATA(0);
        // blue      
        WRITE_DATA(0);
      }      
    }      
    // 180 blue lines
    WRITE_COMMAND(REG_DISPStart);
    WRITE_DATA(0x00);
    WRITE_COMMAND(REG_DataWrite);
    for(Y=0; Y<160; Y++) {
      for(X=0; X<32; X++) {
        // red
        WRITE_DATA(0);
        // green      
        WRITE_DATA(0);
        // blue      
        WRITE_DATA(255);
      }      
    }
    // 180 black lines
    // reset screen to receive data
    WRITE_COMMAND(REG_DISPStart);
    WRITE_DATA(0x00);
    WRITE_COMMAND(REG_DataWrite);
    for(Y=0; Y<160; Y++) {
      for(X=0; X<16; X++) {
        // red
        WRITE_DATA(0);
        // green      
        WRITE_DATA(0);
        // blue      
        WRITE_DATA(0);
      }      
    }
Serial.println("Done...Pattern Generated");    
delay(10000); //delay time can be adjusted as desired
  }
  }        
 void init_OLED() {
  WRITE_COMMAND(REG_SOFTRES); // Software Reset
 
  //    WRITE_COMMAND(REG_DDISP_ON_OFF); // Display ON/OFF SET
  //    WRITE_DATA(0x00); // Display OFF
 
  WRITE_COMMAND(REG_DSTBY_ON_OFF);
  WRITE_DATA(0x00);
 
  WRITE_COMMAND(REG_DFRAME);
  //    WRITE_DATA(0x00);        //60Hz
  //    WRITE_DATA(0x01);        //75Hz
  WRITE_DATA(0x01);        //90Hz
  //    WRITE_DATA(0x03);        //105Hz
  //    WRITE_DATA(0x04);        //120Hz
  //    WRITE_DATA(0x05);        //135Hz
  //    WRITE_DATA(0x06);        //150Hz
 
  WRITE_COMMAND(REG_WriteDirection);
  //    WRITE_DATA(0x00);        //RGB
  WRITE_DATA(0x02);        //(0x01) right to left
                           //(0x02) left to right
                           //(0x04) bottom to top
                           //(0x05) top to bottom 
  WRITE_COMMAND(REG_ScanDirection);
  //    WRITE_DATA(0x00);        //
  WRITE_DATA(0x01);        //
 
  WRITE_COMMAND(REG_IF_Bus_Sel);
  WRITE_DATA(0x00);        //6bit interface bus
  //    WRITE_DATA(0x01);        //8bit interface bus
  //    WRITE_DATA(0x02);        //9bit interface bus
  //    WRITE_DATA(0x03);        //16bit interface bus
  //    WRITE_DATA(0x04);        //18bit interface bus
 
  //    WRITE_COMMAND(REG_PeakDelay);
  //    WRITE_DATA(0x00);
 
  WRITE_COMMAND(REG_PeakWidth);
  WRITE_DATA(0x03);
  WRITE_DATA(0x0F);
  WRITE_DATA(0x05);
 
  WRITE_COMMAND(REG_DotCurrent);
  WRITE_DATA(0x08);
  WRITE_DATA(0x0B);
  WRITE_DATA(0x02);
  WRITE_DATA(0x09);
  WRITE_DATA(0x0A);
  WRITE_DATA(0x0D);
 
  //    WRITE_COMMAND(REG_PreC_Width);
  //    WRITE_DATA(0x02);
 
  WRITE_COMMAND(REG_DDISP_ON_OFF); // Display ON/OFF SET
  WRITE_DATA(0x01); // Display OFF
}
 
void WRITE_COMMAND(unsigned char db_data)
{
  digitalWrite(A0B, HIGH);  //command
  PORTC = ~db_data;
  digitalWrite(CSB, HIGH);
  digitalWrite(WRB, HIGH);
  digitalWrite(WRB, LOW);
  digitalWrite(CSB, LOW);
}
 
void WRITE_DATA(unsigned char db_data)
{
  digitalWrite(A0B, LOW);  //parameter
  PORTC = ~db_data;
  digitalWrite(CSB, HIGH);
  digitalWrite(WRB, HIGH);
  digitalWrite(WRB, LOW);
  digitalWrite(CSB, LOW);
}
